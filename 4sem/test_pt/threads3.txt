#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <unistd.h>
#include <semaphore.h>
#include <sys/times.h>

sem_t sem;
static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
// начальная инициализация мьютекса 

void *thread_func(void *arg)
{
 int i,j,loc_id;
 sleep(1);
 loc_id=*(int *)arg;
 sem_post(&sem);
 for (j=0;j<5;j++){
  pthread_mutex_lock(&mutex); // захват мьютекса
  for (i=0;i<3;i++){printf("Thread %i is running\n",loc_id); sleep(rand()%2);}
  printf("----------------\n");
  pthread_mutex_unlock(&mutex); // освобождение мьютекса
  sched_yield();  // Give time to other threads
  sleep(rand()%10);
                  }
}

int main(void)
{
 int id,result;
 pthread_t threadm[3];
 sem_init(&sem,0,0);
 srand(times(NULL)); // Set the random generator

 for(id=1;id<4;id++)
 {
 result=pthread_create(
        &threadm[id-1], // Thread identifier
        NULL, 
        thread_func,    // Thread start function
        &id             // Parameter to be passed to thread function
                      );
 if(result!=0){
               printf("Creating the %d thread failed\n",id); 
               return EXIT_FAILURE;
              }
 sem_wait(&sem);
 }
 for(id=1;id<4;id++){
 result=pthread_join(threadm[id-1],NULL);
 if(result!=0){
               printf("Joining the %d thread failed",id); 
               return EXIT_FAILURE;
              }
                    }

 sem_destroy(&sem);
 pthread_mutex_destroy(&mutex);

 printf("Done\n");
 return EXIT_SUCCESS;
}
